<?php

/**
 * @file
 * Provides an HTML5-compatible with Flash-fallback audio player.
 *
 * This module provides functionality for loading the jPlayer library and
 * formatters for CCK FileFields.
 */

/**
 * Implementation of hook_menu().
 */
function jplayer_menu() {
  $items = array();

  $items['admin/settings/jplayer'] = array(
    'title' => 'jPlayer settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jplayer_settings_form'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Configure the settings for the jPlayer module.',
    'file' => 'includes/jplayer.admin.inc',
  );

  $items['admin/reports/jplayer'] = array(
    'title' => 'jPlayer content protection statistics',
    'page callback' => 'jplayer_protection_statistics',
    'access arguments' => array('access site reports'),
    'description' => 'View statistics related to content protection for jPlayer.',
    'file' => 'jplayer.admin.inc',
    'file path' => drupal_get_path('module', 'jplayer') . '/includes',
  );

  $items['jplayer/authorize'] = array(
    'title' => 'jPlayer content authorization',
    'page callback' => 'jplayer_authorize',
    'access arguments' => array('access content'),
    'description' => 'jPlayer callback to authorize a sound file to be accessed.',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu callback to authorize access to a file.
 */
function jplayer_authorize($filepath, $timestamp) {
  $filepath = base64_decode($filepath);
  $timestamp = (int)base64_decode($timestamp);

  if (!isset($_SESSION['jplayer_protect'])) {
    $_SESSION['jplayer_protect'] = array();
  }

  if ($timestamp < (time() + variable_get('jplayer_access_time', 30))) {
    $_SESSION['jplayer_protect'][$filepath] = $timestamp;
  }

  drupal_json(time() + variable_get('jplayer_access_time', 30));
}

/**
 * Implementation of hook_cron().
 */
function jplayer_cron() {
  // Delete records older than a week.
  db_query("DELETE FROM {jplayer_denied} WHERE timestamp < %d", time() - 604800);
}

/**
 * Implementation of hook_file_download().
 */
function jplayer_file_download($filepath) {
  if (!variable_get('jplayer_protected', FALSE)) {
    return NULL;
  }

  // We need to determine if we are responsible for this file.
  $filepath = file_create_path($filepath);
  $result = db_query("SELECT * FROM {files} WHERE filepath = '%s'", $filepath);

  // Ensure case-sensitivity of uploaded file names.
  while ($file = db_fetch_object($result)) {
    if (strcmp($file->filepath, $filepath) == 0) {
      break;
    }
  }

  // If the file is not found in the database, we're not responsible for it.
  if (empty($file)) {
    return NULL;
  }

  // Find out if any file field contains this file, and if so, which field
  // and node it belongs to. Required for later access checking.
  $cck_files = array();
  foreach (content_fields() as $field) {
    if ($field['type'] == 'filefield' || $field['type'] == 'image') {
      $db_info = content_database_info($field);
      $table = $db_info['table'];
      $fid_column = $db_info['columns']['fid']['column'];

      $columns = array('vid', 'nid');
      foreach ($db_info['columns'] as $property_name => $column_info) {
        $columns[] = $column_info['column'] .' AS '. $property_name;
      }
      $result = db_query("SELECT ". implode(', ', $columns) ."
                          FROM {". $table ."}
                          WHERE ". $fid_column ." = %d", $file->fid);

      while ($content = db_fetch_array($result)) {
        $content['field'] = $field;
        $cck_files[$field['field_name']][$content['vid']] = $content;
      }
    }
  }

  // If any of the displays for this field are for jPlayer, then we need to
  // protect the file.
  foreach ($cck_files as $field_name => $field_files) {
    foreach ($field_files as $revision_id => $content) {
      $teaser_format = $content['field']['display_settings']['teaser']['format'];
      $full_format = $content['field']['display_settings']['full']['format'];
      // Neither the teaser or the full formatter for this field is a jPlayer
      // display.
      if (!($teaser_format == 'single' || $teaser_format == 'playlist' || $full_format == 'single' || $full_format == 'playlist')) {
        return NULL;
      }
    }
  }

  $access_key = $GLOBALS['base_url'] . '/' . $filepath;

  if (isset($_SESSION['jplayer_protect'][$access_key])) {
    $started = (int)$_SESSION['jplayer_protect'][$access_key];
  }
  else {
    // We need to figure out how the browser would have URL-encoded the file
    // name. If mod_rewrite is modifying the URL, it will decode URL-encoded
    // characters, so we need to check both.
    $encoded = str_replace($file->filename, rawurlencode($file->filename), $filepath);
    $encoded = str_replace('sites/default/files', 'system/files', $encoded);
    // For some reason ampersands are encoded twice by the browser.
    $encoded = str_replace("%26", "%2526", $encoded);
    $encoded_access_key = $GLOBALS['base_url'] . '/' . $encoded;

    if (isset($_SESSION['jplayer_protect'][$encoded_access_key])) {
      $access_key = $encoded_access_key;
      $started = (int)$_SESSION['jplayer_protect'][$access_key];
    }
  }

  // Now we know that content protection is enabled, at least one display for
  // the field uses jPlayer, and we know when the player last started to access
  // the file.
  if ($started) {
    if (time() <= ($started + variable_get('jplayer_access_time', 30))) {
      // Allow access, and immediately expire access to the file. Some browsers
      // (such as Chrome) send multiple HTTP requests for an <audio> element,
      // so if the RANGE header is set we continue to allow access. Also,
      // AppleCoreMedia in OS X 10.7 makes multiple requests in an attempt to
      // fetch metadata about the audio. So, we ignore those requests until the
      // agent indicates that the connection can be closed.
      if (!isset($_SERVER['HTTP_RANGE']) && !(strpos($_SERVER['HTTP_USER_AGENT'], 'AppleCoreMedia') !== FALSE && strpos($_SERVER['HTTP_CONNECTION'], "keep-alive") !== FALSE)) {
        unset($_SESSION['jplayer_protect'][$access_key]);
      }
      return NULL;
    }
  }

  // Otherwise, deny access as the last played time is too far in the past.
  $denied = new stdClass();
  $denied->uid = $GLOBALS['user']->uid;
  $denied->fid = $file->fid;
  $denied->hostname = ip_address();
  $denied->timestamp = time();
  drupal_write_record('jplayer_denied', $denied);
  return -1;
}

/**
 * Implementation of hook_theme().
 */
function jplayer_theme() {
  return array(
    'jplayer_formatter_single' => array(
      'arguments' => array('element' => NULL),
      'file' => 'includes/jplayer.theme.inc',
    ),
    'jplayer_single' => array(
      'arguments' => array('element' => NULL),
      'template' => 'theme/jplayer',
      'file' => 'includes/jplayer.theme.inc',
    ),
    'jplayer_formatter_playlist' => array(
      'arguments' => array('element' => NULL),
      'file' => 'includes/jplayer.theme.inc',
    ),
    'jplayer_playlist' => array(
      'arguments' => array('element' => NULL),
      'template' => 'theme/jplayer',
      'file' => 'includes/jplayer.theme.inc',
    ),
    'jplayer_view_playlist' => array(
      'arguments' => array('view' => NULL, 'items' => NULL),
      'template' => 'theme/jplayer',
      'file' => 'includes/jplayer.theme.inc',
    ),
    'jplayer_item_list' => array(
      'arguments' => array(
        'items' => array(),
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array(),
      ),
      'file' => 'includes/jplayer.theme.inc',
    ),
  );
}

/**
 * Implementation of Views' hook_views_api().
 */
function jplayer_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'jplayer') .'/includes',
  );
}

/**
 * Implementation of CCK's hook_field_formatter_info().
 */
function jplayer_field_formatter_info() {
  return array(
    'single' => array(
      'label' => t('jPlayer player'),
      'field types' => array('filefield', 'audiofield'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'description' => t('Display an audio file as an HTML5-compatible with Flash-fallback audio player.'),
    ),
    'playlist' => array(
      'label' => t('jPlayer multifile playlist'),
      'field types' => array('filefield', 'audiofield'),
      'multiple values' => CONTENT_HANDLE_MULTIPLE,
      'description' => t('Display multi-value fields as an HTML5-compatible with Flash-fallback audio player.'),
    ),
  );
}

/**
 * Add the jPlayer library to the page.
 *
 * @param $add
 *   By default this function will add jPlayer to the page JavaScript array
 *   directly. If wanting to store the jPlayer file as an #attached property,
 *   set this to FALSE and jplayer_add() will only return the needed array
 *   suitable for use as an #attached property.
 */
function jplayer_add($add = TRUE) {
  static $added = FALSE;

  $directory = variable_get('jplayer_directory', 'sites/all/libraries/jplayer');
  $return = FALSE;
  if (file_exists($directory . '/jquery.jplayer.min.js')) {
    $filepath = $directory . '/jquery.jplayer.min.js';
  }
  elseif (file_exists($directory . '/jquery.jplayer.js')) {
    $filepath = $directory . '/jquery.jplayer.js';
  }

  if (isset($filepath)) {
    $jplayer_js = jplayer_get_file_path('jplayer.js');    
    $jplayer_css = jplayer_get_file_path('jplayer.css'); 
    $settings = array('jPlayer' => array(
      'swfPath' => base_path() . variable_get('jplayer_directory', 'sites/all/libraries/jplayer'),
      'autoPlay' => (int) variable_get('jplayer_autoplay', ''),
      'pauseOthers' => variable_get('jplayer_pause_others', FALSE),
      'protected' => variable_get('jplayer_protected', ''),
    ));
    if ($add) {
      drupal_add_js($filepath);
      drupal_add_js($jplayer_js);
      drupal_add_css($jplayer_css);
      if (!$added) {
        drupal_add_js($settings, 'setting');
        $added = TRUE;
      }
    }
    $return = array(
      'js' => array(
        array('data' => $filepath),
        array('data' => $jplayer_js),
        array('data' => $settings, 'type' => 'setting'),
      ),
      'css' => array(
        array('data' => $jplayer_css),
      ),
    );
  }

  return $return;
}

/**
 * Returns path to the most appropriate file 
 *
 * @param $filename
 *   Name of the file to find
 * @param $required_files
 *   Other files required in target folder
 */
function jplayer_get_file_path($filename, $required_files = array()) {
  global $theme;
  $theme_dir = drupal_get_path('theme', $theme) . '/jplayer/';
  $found = false;
  if (file_exists($path = $theme_dir . $filename)) {
    $found = true;
    foreach ($required_files as $key => $value) {
      if (!file_exists($theme_dir . $value)) {
        $found = false;
        break;
      }
    }
  }
  return $found ? $path : (drupal_get_path('module', 'jplayer') . '/theme/' . $filename);
}

/**
 * Return the version of jQuery UI installed.
 *
 * @param $directory
 *   The directory to check for a jPlayer installation.
 */
function jplayer_get_version($directory = NULL) {
  $version = 0;

  if (!isset($directory)) {
    $directory = variable_get('jplayer_directory', 'sites/all/libraries/jplayer');
  }

  if (file_exists($directory . '/jquery.jplayer.min.js')) {
    $contents = file_get_contents($directory . '/jquery.jplayer.min.js');
  }
  elseif (file_exists($directory . '/jquery.jplayer.js')) {
    $contents = file_get_contents($directory . '/jquery.jplayer.js');
  }

  $matches = array();
  preg_match('/Version:?[ ]*([\d.]+)/i', $contents, $matches);

  if (isset($matches[1])) {
    $version = $matches[1];
  }

  return $version;
}
